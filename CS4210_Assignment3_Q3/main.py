# -------------------------------------------------------------------------
# AUTHOR: Chanrady Ho
# FILENAME: Calculating the accuracy of the test dataset after training dataset
# SPECIFICATION: Using based classifier, ensemble classifier, and random forest to calculate accuracy
# FOR: CS 4210- Assignment #3
# TIME SPENT: 6 hours
# -----------------------------------------------------------*/

# IMPORTANT NOTE: DO NOT USE ANY ADVANCED PYTHON LIBRARY TO COMPLETE THIS CODE SUCH AS numpy OR pandas. You have to work here only with standard vectors and arrays

# importing some Python libraries
import csv
from sklearn import tree
from sklearn.utils import resample
from sklearn.ensemble import RandomForestClassifier

dbTraining = []
dbTest = []
X_training = []
y_training = []
classVotes = []  # this array will be used to count the votes of each classifier
based_accuracy = 0
ensemble_accuracy = 0
random_forest_accuracy = 0

# reading the training data from a csv file and populate dbTraining
# --> add your Python code here
with open('optdigits.tra', 'r') as csvfile:
    reader = csv.reader(csvfile)
    for i, row in enumerate(reader):
        dbTraining.append(row)

# reading the test data from a csv file and populate dbTest
# --> add your Python code here
with open('optdigits.tes', 'r') as csvfile:
    reader = csv.reader(csvfile)
    for i, row in enumerate(reader):
        dbTest.append(row)

# initializing the class votes for each test sample. Example: classVotes.append([0,0,0,0,0,0,0,0,0,0])
# --> add your Python code here
for i, row in enumerate(dbTest):
    classVotes.append([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

print("Started my base and ensemble classifier ...")

for k in range(20):  # we will create 20 bootstrap samples here (k = 20). One classifier will be created for each bootstrap sample
    bootstrapSample = resample(dbTraining, n_samples=len(dbTraining), replace=True)

    # populate the values of X_training and y_training by using the bootstrapSample
    # --> add your Python code here
    for j, element in enumerate(bootstrapSample):
        X_training.append(element[0:-1])
        y_training.append(element[-1])

    # fitting the decision tree to the data
    clf = tree.DecisionTreeClassifier(criterion='entropy', max_depth=None)  # we will use a single decision tree without pruning it
    clf = clf.fit(X_training, y_training)

    # Create a Random Forest Classifier
    clf_forest = RandomForestClassifier(
        n_estimators=20)  # this is the number of decision trees that will be generated by Random Forest. The sample of the ensemble method used before

    # #Fit Random Forest to the training data
    clf_forest.fit(X_training, y_training)

    for i, testSample in enumerate(dbTest):
        # make the classifier prediction for each test sample and update the corresponding index value in classVotes. For instance,
        # if your first base classifier predicted 2 for the first test sample, then classVotes[0,0,0,0,0,0,0,0,0,0] will change to classVotes[0,0,1,0,0,0,0,0,0,0].
        # Later, if your second base classifier predicted 3 for the first test sample, then classVotes[0,0,1,0,0,0,0,0,0,0] will change to classVotes[0,0,1,1,0,0,0,0,0,0]
        # Later, if your third base classifier predicted 3 for the first test sample, then classVotes[0,0,1,1,0,0,0,0,0,0] will change to classVotes[0,0,1,2,0,0,0,0,0,0]
        # this array will consolidate the votes of all classifier for all test samples
        # --> add your Python code here
        classifier_predicted = clf.predict([testSample[0:-1]])
        classVotes[i][int(classifier_predicted)] = int(classVotes[i][int(classifier_predicted)]) + 1

        if k == 0:  # for only the first base classifier, compare the prediction with the true label of the test sample here to start calculating its accuracy
            # --> add your Python code here
            if classifier_predicted == testSample[-1]:
                based_accuracy += 1

        # make the Random Forest prediction for each test sample. Example: class_predicted_rf = clf.predict([[3, 1, 2, 1, ...]]
        # --> add your Python code here
        class_predicted_rf = clf_forest.predict([testSample[0:-1]])

        # compare the Random Forest prediction for each test sample with the ground truth label to calculate its accuracy
        # --> add your Python code here
        if class_predicted_rf == testSample[-1]:
            random_forest_accuracy += 1

    if k == 0:  # for only the first base classifier, print its accuracy here
        # --> add your Python code here
        accuracy = based_accuracy / len(dbTest)
        print("Finished my base classifier (fast but relatively low accuracy) ...")
        print("My base classifier accuracy: " + str(accuracy))
        print("")

    # now, compare the final ensemble prediction (majority vote in classVotes) for each test sample with the ground truth label to calculate the accuracy of the ensemble classifier (all base classifiers together)
    # --> add your Python code here
    for i, testSample in enumerate(dbTest):
        if classVotes[i].index(max(classVotes[i])) == int(testSample[-1]):
            ensemble_accuracy += 1

# printing the ensemble accuracy here
accuracy = ensemble_accuracy / (len(dbTest) * 20)
print("Finished my ensemble classifier (slow but higher accuracy) ...")
print("My ensemble accuracy: " + str(accuracy))
print("")

print("Started Random Forest algorithm ...")
# #printing Random Forest accuracy here
accuracy = random_forest_accuracy / (len(dbTest) * 20)
print("Random Forest accuracy: " + str(accuracy))
print("Finished Random Forest algorithm (much faster and higher accuracy!) ...")
